import React, { useMemo, useRef, useEffect } from 'react';
import { AiNarrativeWidgetConfig, CsvGlobalStats } from '../../types';
import WidgetWrapper from '../ui/WidgetWrapper';
import { marked } from 'marked';
import { Rows, Columns, ShieldCheck, Copy } from 'lucide-react';

interface AiNarrativeWidgetProps {
  config: AiNarrativeWidgetConfig;
  csvGlobalStats: CsvGlobalStats | null;
}

const StatCard = ({ icon, title, value }: { icon: React.ReactNode, title: string, value: string | number }) => (
    <div className="bg-slate-800 p-4 rounded-lg flex items-center gap-3">
        <div className="flex-shrink-0">{icon}</div>
        <div>
            <p className="text-slate-400 text-sm font-medium">{title}</p>
            <p className="text-slate-100 text-xl font-bold">{value.toLocaleString()}</p>
        </div>
    </div>
);

export default function AiNarrativeWidget({ config, csvGlobalStats }: AiNarrativeWidgetProps) {
  const contentRef = useRef<HTMLDivElement>(null);
  
  const sanitizedHtml = useMemo(() => {
    if (!config.content) return '';
    const rawHtml = marked.parse(config.content, { async: false }) as string;
    // For this app, we trust the AI-generated markdown.
    // In a production app with user input, we would use a sanitizer like DOMPurify here.
    return rawHtml;
  }, [config.content]);

  useEffect(() => {
    if (!contentRef.current) return;

    const copyIconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>`;

    const listItems = contentRef.current.querySelectorAll('li');
    listItems.forEach(li => {
      if (li.querySelector('.copy-btn')) return;

      const button = document.createElement('button');
      button.className = 'copy-btn';
      button.title = 'Copy to clipboard';
      button.innerHTML = copyIconSvg;
      
      button.onclick = (e) => {
        e.stopPropagation();
        navigator.clipboard.writeText(li.innerText).then(() => {
          button.innerHTML = 'Copied!';
          setTimeout(() => {
            button.innerHTML = copyIconSvg;
          }, 1500);
        });
      };

      li.appendChild(button);
    });
  }, [sanitizedHtml]);

  const qualityScore = csvGlobalStats 
    ? (csvGlobalStats.totalRows * csvGlobalStats.totalCols > 0 ? 
        Math.round((1 - (csvGlobalStats.emptyCells / (csvGlobalStats.totalRows * csvGlobalStats.totalCols))) * 100) : 100)
    : 0;
  
  return (
    <WidgetWrapper 
      title="Apollo's Analysis"
      description="A comprehensive, multi-phase data analysis report generated by our AI expert, Apollo."
      menu={false}
    >
        {csvGlobalStats && (
            <div className="p-6 grid grid-cols-1 md:grid-cols-3 gap-4 border-b border-slate-700/50 bg-slate-800/20">
                <StatCard 
                    icon={<Rows className="h-8 w-8 text-brand-blue-400"/>}
                    title="Total Rows"
                    value={csvGlobalStats.totalRows}
                />
                <StatCard 
                    icon={<Columns className="h-8 w-8 text-brand-blue-400"/>}
                    title="Total Columns"
                    value={csvGlobalStats.totalCols}
                />
                <StatCard 
                    icon={<ShieldCheck className={`h-8 w-8 ${qualityScore > 90 ? 'text-green-500' : qualityScore > 70 ? 'text-yellow-500' : 'text-red-500'}`}/>}
                    title="Data Quality"
                    value={`${qualityScore} / 100`}
                />
            </div>
        )}
      <div 
        ref={contentRef}
        className="apollo-analysis-content p-6 max-h-[60vh] overflow-y-auto custom-scrollbar"
        dangerouslySetInnerHTML={{ __html: sanitizedHtml }}
      />
    </WidgetWrapper>
  );
}